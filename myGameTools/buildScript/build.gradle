//配置构建可运行jar包，配置构建可运行jar包。
//配置构建可运行jar包，配置构建可运行jar包。
//配置构建可运行jar包，配置构建可运行jar包。
//目前settings.gradle，为配置导入依赖项目jar包。

//构建脚本所执行的命令=======>[gradle build deployApp clean]<=======
//构建脚本所执行的命令=======>[gradle build deployApp clean]<=======
//构建脚本所执行的命令=======>[gradle build deployApp clean]<=======

//设置构建脚本所使用的插件
apply plugin: 'java'
apply plugin: 'application'
buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
  }
}
//使用ssh的插件
apply plugin: 'org.hidetake.ssh'


//程序启动类  
mainClassName = 'com.playmore.http.jetty.SpringContextLoader'
//指定源码编译版本
sourceCompatibility = 1.8
targetCompatibility = 1.8			



////////////////////////////////////////////////////*///////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////*///*/////////////////////////////////////////////////////////////////
////////////////////////////////////////////////*///////*///////////////////////////////////////////////////////////////
//////////////////////////////////////////////*///////////*/////////////////////////////////////////////////////////////
////////////////////////////////////////////*///////////////*///////////////////////////////////////////////////////////
//////////////////////////////////////////*///////////////////*/////////////////////////////////////////////////////////


//配置远程服务器地址访问权限
ssh.settings {  
  knownHosts = allowAnyHosts  
}  
//配置服务器地址与密码
remotes {  
  innerServer01 {  		
    host = '192.168.56.31'  
    user = 'root'  
    password = 'playmore!@#QWE'  
  }
  innerServer02 {  		
    host = '192.168.56.32'  
    user = 'root'  
    password = 'xuanyuanjian'  
  }
}  

//不将配置文件打包到jar文件内
processResources {
    exclude { "**/*.*" }
}

repositories {			//所需的jar仓库配置  
    jcenter()  			//jcenter仓库配置  
    mavenCentral()  	//mavenCentral仓库配置  
}  

// 设置编译语言为UTF-8
compileJava {  
    options.encoding = "UTF-8"  // 设置编译语言为UTF-8  
}  

//设置源码，与资源目录 ，同为src下。
sourceSets {				
   main {
      java {
         srcDir 'src'
      }
      resources {
         srcDir 'src' //资源目录
      }
   }
}

//设置程序所开发的依赖
dependencies {
	compile project(':utils')		// 设置项目依赖  

    //compile fileTree(dir: 'lib', include: ['*.jar'])		//设置lib下的所有jar依赖
    
    println "===================dependencies ok==================="
    
}


//复制拷贝资源到发布的目录
task copyRes (type: Copy) {
     copy {
      	from 'conf'
        into 'build\\scripts\\conf'				//设置把conf文件目录，复制到启动脚本目录下。
        include '*.*'
     }
     
	 copy {
      	from 'src'
        into 'build\\scripts'				//设置把sh脚本文件目录，复制到启动脚本目录下。
        include '*.sh'
     }
	 
     println "===================copyRes ok==================="
}

//打包jar包
jar {
    manifest {
        attributes 'Main-Class': mainClassName					//设置启动类
        attributes "Class-Path": configurations.compile.collect { "${it.name}" }.join(' ')
    }
    
    //from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }			//所有依赖将编译打到jar里面
    
    from('src') {		//包含src所有文件
        include '*.*'
   	}
   
    into('assets') {
        from 'assets'
    }
    
    exclude('LICENSE.txt', 'NOTICE.txt', 'rootdoc.txt')  
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'  
    exclude 'META-INF/NOTICE', 'META-INF/NOTICE.txt'  
    exclude 'META-INF/LICENSE', 'META-INF/LICENSE.txt'  
    exclude 'META-INF/DEPENDENCIES'  
 
    println "===================jar ok==================="
}

//发布程序
task deployApp << {  
    ssh.run {
    	//使用innerServer01的服务器配置
		session(remotes.innerServer01) {
	       
	       def targetDir = '/data/server'		//服务器目标路径
	       def appName = rootProject.name
	       
	       println "appName = " + appName
	       
	       put from: buildDir.toString() + '/distributions/' + appName + '.zip', into: targetDir				//put执行上传，from来设置上传的文件，或者是目录 ，into来设置服务器目标目录位置
	         
	       def unzipScript = ' unzip -o ' + appName + '.zip;'			//解压上传的zip包
	       def toAppDir = ' cd ' + targetDir + ';'						//转到app目录 
	       //def runApp = ' cd ' + appName + '/bin; ./stop.sh; sleep 1; ./start.sh;'			//运行脚本命令
		   def runApp = ' cd ' + appName + '/bin; ./stop.sh; sleep 1; screen -dmS '+appName+' ./start.sh;'			//运行脚本命令
	       
	       def javaInstallDir = '/usr/local/java-1.8'					//java安装的目录
	       def javaEnvironment = ' export JAVA_HOME='+javaInstallDir+' export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=$JAVA_HOME/jre/lib/rt.jar:.;'	//设置java环境变量
	       
	       def screenLs = ' screen -ls;' 
			
		   def exeScript = toAppDir + unzipScript + javaEnvironment + runApp			//执行拼装的ssh命令语句
		   
	       def result = execute 'pwd; ls;' + exeScript					
	       
	       println "exeScript:"+exeScript
		}
	}
	
	println "===================deployApp ok==================="
} 


