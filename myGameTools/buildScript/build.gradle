//配置构建可运行jar包，配置构建可运行jar包。
//配置构建可运行jar包，配置构建可运行jar包。
//配置构建可运行jar包，配置构建可运行jar包。
//目前settings.gradle，为配置导入依赖项目jar包。

//-PbuildType=dev为命令行传入的buildType参数名，值为dev。在这里buildType默认为innerServer01

//构建脚本所执行的命令=======>[gradle build deployApp -PbuildType=dev -PupdateConf=true]<=======
//构建脚本所执行的命令=======>[gradle build deployApp -PbuildType=dev -PupdateConf=true]<=======
//构建脚本所执行的命令=======>[gradle build deployApp -PbuildType=dev -PupdateConf=true]<=======

//设置构建脚本所使用的插件
apply plugin: 'java'
apply plugin: 'application'
buildscript 
{
  repositories 
  {
    jcenter()
  }
  dependencies 
  {
    classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
  }
}
//使用ssh的插件
apply plugin: 'org.hidetake.ssh'


//程序启动类  
mainClassName = 'com.playmore.net.netty.context.SpringContextLoader'
//指定源码编译版本
sourceCompatibility = 1.8
targetCompatibility = 1.8			



////////////////////////////////////////////////////*///////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////*///*/////////////////////////////////////////////////////////////////
////////////////////////////////////////////////*///////*///////////////////////////////////////////////////////////////
//////////////////////////////////////////////*///////////*/////////////////////////////////////////////////////////////
////////////////////////////////////////////*///////////////*///////////////////////////////////////////////////////////
//////////////////////////////////////////*///////////////////*/////////////////////////////////////////////////////////

//设置程序所需要的配置文件有哪些
def useConfigs=
[
	'db.properties',
	'global.config',
	'info.properties'
]

//配置远程服务器地址访问权限
ssh.settings 
{  
  knownHosts = allowAnyHosts  
}  

//配置服务器地址与密码
remotes 
{  
  dev 
  {
    host = '192.168.56.31'  
    user = 'root'  
    password = 'playmore!@#QWE'  
  }
  
  test 
  {  		
    host = '192.168.56.32'  
    user = 'root'  
    password = 'xuanyuanjian'  
  }
}  

//将配置文件打包到jar文件内
//processResources 
//{
//   exclude { "**/*.*" }
//}

repositories 		//所需的jar仓库配置  
{			
    jcenter()  			//jcenter仓库配置  
    mavenCentral()  	//mavenCentral仓库配置  
}  

// 设置编译语言为UTF-8
compileJava 
{  
    options.encoding = "UTF-8"  // 设置编译语言为UTF-8  
}  

//设置源码，与资源目录 ，同为src下。
sourceSets 
{				
   main 
   {
      java 
	  {
         srcDir 'src'
      }
      resources 
	  {
         srcDir 'src' //资源目录
      }
   }
}

//设置程序所开发的依赖
dependencies 
{
	compile fileTree(dir: '../lib/lib', include: ['*.jar'])		//设置lib下的所有jar依赖
	
  	compile project(':attribute')
  	compile project(':gameCore')		
  	compile project(':netCore')		
  	compile project(':remoteComms')		
  	compile project(':xNetty4')				
    
    println "===================dependencies ok==================="
    
}


//复制拷贝资源到发布的目录
task copyRes (type: Copy){
     copy 
	 {
      	from 'conf'
        into 'build\\scripts\\conf'				//设置把conf文件目录，复制到启动脚本目录下。
        include '*.*'
     }
     
	 copy 
	 {
      	from 'src'
        into 'build\\scripts'				//设置把sh脚本文件目录，复制到启动脚本目录下。
        include '*.sh'
     }
	 
     println "===================copyRes ok==================="
}

//打包jar包
jar 
{
    manifest 
	{
        attributes 'Main-Class': mainClassName					//设置启动类
        attributes "Class-Path": configurations.compile.collect { "${it.name}" }.join(' ')
    }
    
    //from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }			//所有依赖将编译打到jar里面
    
    from('src') 	//包含src所有文件
	{		
        include '*.*'
   	}
   
    into('assets') 
	{
        from 'assets'
    }
    
    exclude('LICENSE.txt', 'NOTICE.txt', 'rootdoc.txt')  
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'  
    exclude 'META-INF/NOTICE', 'META-INF/NOTICE.txt'  
    exclude 'META-INF/LICENSE', 'META-INF/LICENSE.txt'  
    exclude 'META-INF/DEPENDENCIES'  
		
    println "===================Q10Server jar ok==================="
}

//发布程序
task deployApp << 
{  
	println "buildType=" + buildType
	
	if(buildType == 'all')
	{
		for(remoteServer in remotes)
		{
			def updateConfig = getUpdateConfigScript(useConfigs , remoteServer)
	
			remoteSession(remoteServer , updateConfig)
		}
	}
	else
	{
		def remoteServer = remotes.dev
	
		//根据不同类型，执行不同的服务器配置
		if(buildType == 'dev')
			remoteServer = remotes.dev
		else if(buildType == 'test')
			remoteServer = remotes.test
		
		def updateConfig = getUpdateConfigScript(useConfigs , remoteServer)
		
		remoteSession(remoteServer , updateConfig)
	}
	
	println "===================deployApp ok==================="
} 


String getUpdateConfigScript(useConfigs , remoteServer)
{
 	def updateConfig = ''
 	if(updateConf == 'false')
 		return updateConfig
 	
	for(conf in useConfigs)
	{
		def array = conf.split("\\.")
		
		def remoteName = remoteServer.toString().split("\\[")[0]
		
  		updateConfig += 'cat ' + array[0] + '_' + remoteName + '.' + array[1] + ' > ' + conf + ' ;'
	}
	
	return updateConfig
}

void remoteSession(remoteServer , updateConfig)
{
	ssh.run 
	{
		//连接远程服务器
		session(remoteServer) 
		{
	       def targetDir = '/data/server'		//服务器目标路径
	       def appName = rootProject.name
	       
	       println "appName = " + appName
	       
	       put from: buildDir.toString() + '/distributions/' + appName + '.zip', into: targetDir				//put执行上传，from来设置上传的文件，或者是目录 ，into来设置服务器目标目录位置
	         
	       def unzipScript = ' unzip -o ' + appName + '.zip;'			//解压上传的zip包
	       
	       def toAppDir = ' cd ' + targetDir + ';'						//转到app目录 
	       def toRunDir = ' cd ' + appName + '/bin;'					//转到运行目录
	       def toConfDir = ' cd conf;'									//转到conf目录
	       
	       def javaInstallDir = '/usr/local/java-1.8'										//java安装的目录
	       def javaEnvironment = ' export JAVA_HOME='+javaInstallDir+' export PATH=$JAVA_HOME/bin:$PATH export CLASSPATH=$JAVA_HOME/jre/lib/rt.jar:.;'	//设置java环境变量
	       
		   def runApp = ' ./stop.sh; sleep 1; screen -dmS '+appName+' ./start.sh;'			//运行脚本命令
		   
	       if(updateConfig != '')
	       {
	       		updateConfig = toConfDir + updateConfig
	       		runApp = 'cd ../; ' + runApp
	       }
	       
		   def execScript = toAppDir + unzipScript + javaEnvironment + toRunDir +  updateConfig + runApp			//执行拼装的ssh命令语句
		   
	       def result = execute 'pwd; ls;' + execScript					
	       
	       println "execScript:"+execScript
		}
	}
}

